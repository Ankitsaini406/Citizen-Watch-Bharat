generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model News {
  id             String    @id @default(cuid())
  title          String
  slug           String    @unique
  subtitle       String?
  tags           String[]
  categoryId     String
  content        Json
  issue          String[]  @default([])
  authorId       String
  author_name    String
  views          Int       @default(0)
  live           Boolean   @default(false)
  isReview       Boolean   @default(false)
  isPublish      Boolean   @default(false)
  isDeleted      Boolean   @default(false)
  twitter_link   String
  facebook_link  String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  city           String
  state          String
  status         String    @default("Draft")
  heroImage      String
  editorId       String?
  editor_name    String?
  lastEditedAt   DateTime?
  subCategoryId  String?
  isBreaking     Boolean   @default(false)
  pngImage       String?
  instagram_link String?
  country        String?

  // New fields for bookmark and points system
  bookmarkCount  Int @default(0)
  shareCount     Int @default(0)
  pointsPerShare Int @default(10)

  author      User              @relation(fields: [authorId], references: [id])
  category    Category          @relation(fields: [categoryId], references: [id])
  editor      User?             @relation("NewsEditor", fields: [editorId], references: [id])
  subCategory SubCategory?      @relation(fields: [subCategoryId], references: [id])
  editHistory NewsEditHistory[]

  // New relations for bookmark and sharing
  bookmarks Bookmark[]
  shares    SharedNews[]
}

model User {
  id                       String    @id @default(cuid())
  name                     String
  email                    String    @unique
  phonenumber              String?
  address                  String?
  image                    String?
  password                 String?
  role                     Role      @default(USER)
  offerletter              String?
  joindate                 DateTime?
  terminate                DateTime?
  noticeperiod             DateTime?
  isDelete                 Boolean   @default(false)
  status                   String?
  lastLogin                DateTime?
  createdBy                String?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  managerId                String?
  isActive                 Boolean   @default(false)
  department               String?
  description              String?
  intro                    String?
  facebook_link            String?
  instagram_link           String?
  linkedin_link            String?
  twitter_link             String?
  passwordResetToken       String?
  passwordResetTokenExpiry DateTime?

  // New fields for points system
  totalPoints Int @default(0)

  editedUsers    EditHistory[]     @relation("EditorUser")
  editHistory    EditHistory[]
  news           News[]
  editedNews     News[]            @relation("NewsEditor")
  newsEdited     NewsEditHistory[]
  manager        User?             @relation("UserManager", fields: [managerId], references: [id])
  subordinates   User[]            @relation("UserManager")
  UserAttendance UserAttendance[]

  // New relations for bookmark and points system
  bookmarks     Bookmark[]
  sharedNews    SharedNews[]
  pointsHistory PointsHistory[]
}

// New models for bookmark and points system
model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  newsId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  news News @relation(fields: [newsId], references: [id], onDelete: Cascade)

  @@unique([userId, newsId])
  @@map("bookmarks")
}

model SharedNews {
  id           String   @id @default(cuid())
  userId       String
  newsId       String
  pointsEarned Int      @default(0)
  sharedAt     DateTime @default(now())
  platform     String? // 'facebook', 'twitter', 'linkedin', 'instagram', 'direct'

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  news News @relation(fields: [newsId], references: [id], onDelete: Cascade)

  @@unique([userId, newsId, sharedAt])
  @@map("shared_news")
}

model PointsHistory {
  id          String   @id @default(cuid())
  userId      String
  points      Int
  type        String // 'news_share', 'reward', 'bonus', 'redemption'
  description String?
  referenceId String? // ID of related record (SharedNews id, etc.)
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("points_history")
}

model Category {
  id            String        @id @default(cuid())
  name          String        @unique
  slug          String        @unique
  description   String?
  parentId      String?
  parent        Category?     @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children      Category[]    @relation("CategoryHierarchy")
  news          News[]
  subCategories SubCategory[]
}

model SubCategory {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  categoryId  String
  news        News[]
  category    Category @relation(fields: [categoryId], references: [id])
}

model EditHistory {
  id       String   @id @default(cuid())
  userId   String
  editorId String
  editDate DateTime @default(now())
  editor   User     @relation("EditorUser", fields: [editorId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
}

model NewsEditHistory {
  id       String   @id @default(cuid())
  newsId   String
  editorId String
  editDate DateTime @default(now())
  editor   User     @relation(fields: [editorId], references: [id])
  news     News     @relation(fields: [newsId], references: [id])
}

model Advertisement {
  id        String   @id
  title     String
  imageUrl  String
  link      String
  position  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime
  page      String
}

model UserAttendance {
  id       String    @id
  userId   String
  date     DateTime
  loginAt  DateTime?
  punchIn  DateTime?
  punchOut DateTime?
  User     User      @relation(fields: [userId], references: [id])

  @@unique([userId, date])
}

model Content {
  id        String    @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  createdAt DateTime  @default(now())
  updatedAt DateTime?
}

model Nominees {
  id                 String   @id @default(cuid())
  award              String
  name               String
  age                String?
  phoneNumber        String
  email              String
  address            String
  currentOccupation  String
  organizationName   String?
  linkdin            String?
  facebook           String?
  instagram          String?
  twitter            String?
  background         String
  journey            String?
  impactArea         String
  keyAchievements    String
  challengesOvercome String
  recognitionReason  String
  photos             String?
  videos             String?
  mediaCoverage      String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
  EDITOR
  INTERN
  SUB_ADMIN
  JOURNALIST
  SENIOR_EDITOR
  SENIOR_JOURNALIST
}
